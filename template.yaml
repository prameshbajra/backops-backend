AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: backop-backend

Globals:
  Function:
    Timeout: 10
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  # S3 bucket
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "backop-upload-bucket"
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
            - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - ETag
            MaxAge: 3000

  # Cognito
  UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: BackopUserPool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: BackopUserPoolClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      IdTokenValidity: 24
      AccessTokenValidity: 24
      SupportedIdentityProviders:
        - COGNITO

  # API Gateway
  BackopApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod 
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "Authorization"
          - "Content-Type"
        AllowMethods:
          - GET
          - POST
        MaxAge: 3600
      Auth:
        DefaultAuthorizer: JWTTokenAuthorizer
        Authorizers:
          JWTTokenAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience: 
                - !Ref UserPoolClient
            IdentitySource: "$request.header.Authorization"

  # Functions
  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: signin.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        SignInEvent:
          Type: Api
          Properties:
            Path: /sign-in
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - signin.ts

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: uploadToS3.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi 
            Path: /upload
            Method: post 
      Environment:
          Variables:
            BUCKET_NAME: !Ref UploadBucket
            EXPIRATION_TIME: 300
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadBucket
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - uploadToS3.ts

  CompleteUploadToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: completeUploadToS3.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Events:
        CompeleteUploadToS3Event:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi 
            Path: /complete
            Method: post 
      Environment:
          Variables:
            BUCKET_NAME: !Ref UploadBucket
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadBucket
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - completeUploadToS3.ts

  # Resource group or application insights
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Join
        - ''
        - 
          - ApplicationInsights-SAM-
          - !Ref AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Join
        - ''
        - 
          - ApplicationInsights-SAM-
          - !Ref AWS::StackName
      AutoConfigurationEnabled: true
    DependsOn: ApplicationResourceGroup
