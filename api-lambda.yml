AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway and Lambda Functions for backop-backend

Parameters:
  UserPool:
    Type: String
  UserPoolClient:
    Type: String
  UploadBucket:
    Type: String
  ThumbnailBucket:
    Type: String
  DynamoDBTable:
    Type: String

Resources:
  # APIs
  BackopApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: APIs that need authentication
      StageName: Prod
      DefaultRouteSettings:
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "Authorization"
          - "Content-Type"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        MaxAge: 3600
      Auth:
        DefaultAuthorizer: JWTTokenAuthorizer
        Authorizers:
          JWTTokenAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref UserPoolClient
            IdentitySource: "$request.header.Authorization"

  BackopOpenApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: APIs that do not need authentication
      StageName: Prod
      DefaultRouteSettings:
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "Authorization"
          - "Content-Type"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        MaxAge: 3600

  # Functions
  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: signin.lambdaHandler
      Runtime: nodejs20.x
      Timeout: 30
      Architectures:
        - arm64
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopOpenApi
            Path: /sign-in
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - signin.ts

  GetLoggedInUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: getLoggedInUser.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi
            Path: /user
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - getLoggedInUser.ts

  SignOutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: signout.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi
            Path: /sign-out
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - signout.ts

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: uploadToS3.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 35
      Architectures:
        - arm64
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi
            Path: /upload
            Method: POST
            RouteSettings:  
              ThrottlingBurstLimit: 400 
              ThrottlingRateLimit: 400   
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
          EXPIRATION_TIME: 300
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadBucket
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - uploadToS3.ts

  CompleteUploadToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: completeUploadToS3.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 35
      Architectures:
        - arm64
      Events:
        CompeleteUploadToS3Event:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi
            Path: /complete
            Method: POST
            RouteSettings:  
              ThrottlingBurstLimit: 400 
              ThrottlingRateLimit: 400  
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
          DYNAMODB_TABLE: !Ref DynamoDBTable
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - completeUploadToS3.ts

  DownloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: downloadFileFromS3.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi
            Path: /download
            Method: POST
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: !Ref UploadBucket
          THUMBNAIL_BUCKET_NAME: !Ref ThumbnailBucket
          EXPIRATION_TIME: 300
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadBucket
        - S3FullAccessPolicy:
            BucketName: !Ref ThumbnailBucket
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - downloadFileFromS3.ts

  DeleteObjectsInS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: deleteObjectsInS3.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi
            Path: /delete-objects
            Method: DELETE
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: !Ref UploadBucket
          THUMBNAIL_BUCKET_NAME: !Ref ThumbnailBucket
          DYNAMODB_TABLE: !Ref DynamoDBTable
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadBucket
        - S3FullAccessPolicy:
            BucketName: !Ref ThumbnailBucket 
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - deleteObjectsInS3.ts

  GenerateThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: generateThumbnail.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 120
      Layers:
        - !Ref SharpLayer
      Architectures:
        - arm64
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref UploadBucket
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: !Ref UploadBucket
          THUMBNAIL_BUCKET_NAME: !Ref ThumbnailBucket
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref UploadBucket
        - S3FullAccessPolicy:
            BucketName: !Ref ThumbnailBucket
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        Target: "es2020"
        Sourcemap: true
        OutExtension:
          - .js=.mjs
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
        External:
          - sharp
        EntryPoints:
          - generateThumbnail.ts

  GetObjectListFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/src/
      Handler: getObjectList.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Events:
        UploadEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref BackopApi
            Path: /objects
            Method: POST
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - getObjectList.ts


  ## Sharp lambda layer
  SharpLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sharp
      ContentUri: lambdas/layers/sharp/release-arm64.zip
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - nodejs18.x
        - nodejs16.x

Outputs:
  BackopApi:
    Value: !Ref BackopApi
  BackopOpenApi:
    Value: !Ref BackopOpenApi
  SignInFunction:
    Value: !Ref SignInFunction
  UploadFunction:
    Value: !Ref UploadFunction
  CompleteUploadToS3Function:
    Value: !Ref CompleteUploadToS3Function
  DownloadFunction:
    Value: !Ref DownloadFunction
  GetLoggedInUserFunction:
    Value: !Ref GetLoggedInUserFunction
  DeleteObjectsInS3Function:
    Value: !Ref DeleteObjectsInS3Function
  SignOutFunction:
    Value: !Ref SignOutFunction
